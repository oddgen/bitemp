/*
 * Copyright 2016 Philipp Salvisberg <philipp.salvisberg@trivadis.com>
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.oddgen.bitemp.sqldev.templates

import com.jcabi.aspects.Loggable
import org.oddgen.bitemp.sqldev.generators.BitempRemodeler
import org.oddgen.bitemp.sqldev.model.generator.ApiType
import org.oddgen.bitemp.sqldev.model.generator.GeneratorModel
import org.oddgen.bitemp.sqldev.model.generator.GeneratorModelTools
import org.oddgen.bitemp.sqldev.resources.BitempResources
import org.oddgen.sqldev.LoggableConstants

@Loggable(LoggableConstants.DEBUG)
class CreateApiPackageSpecification {
	private extension GeneratorModelTools generatorModelTools = new GeneratorModelTools

	def compile(GeneratorModel model) '''
		«IF model.inputTable.exists»
			--
			-- Create API package specification
			--
			«val tableName = model.inputTable.getNewTableName(model).toLowerCase»
			«val histTableName = if (model.isTemporalValidity) model.newHistTable.getNewTableName(model).toLowerCase»
			CREATE OR REPLACE PACKAGE «model.apiPackageName» AS
			   /** 
			   * «model.targetModel.apiTypeToString.toFirstUpper» API for table «tableName»«IF model.isTemporalValidity» (including history table «histTableName»)«ENDIF»
			   * generated by «BitempResources.get("EXTENSION_NAME")».
			   *
			   * @headcom
			   */
			   
			   /**
			   * DBMS_OUTPUT level for debugging 
			   */
			   SUBTYPE dbms_output_level_type IS SIMPLE_INTEGER RANGE 0..3;
			   co_off   CONSTANT dbms_output_level_type := 0;
			   co_info  CONSTANT dbms_output_level_type := 1;
			   co_debug CONSTANT dbms_output_level_type := 2;
			   co_trace CONSTANT dbms_output_level_type := 3;
			   
			   /**
			   * Defines the level of debugging information printed via DBMS_OUTPUT.
			   *
			   * @param in_level debug level, valid are:
			   *                    co_off   (0) - no output generated
			   *                    co_info  (1) - prints basic processing information
			   *                    co_debug (2) - prints short debugging messages
			   *                    co_trace (3) - prints all messages, e.g. content of internal structures
			   */
			   PROCEDURE set_debug_output (
			      in_level IN dbms_output_level_type DEFAULT co_off
			   );

			   «IF model.targetModel == ApiType.BI_TEMPORAL || model.targetModel == ApiType.UNI_TEMPORAL_VALID_TIME»
			   /**
			   * Create staging and logging table for bulk processing via init_load and upd_load.
			   *
			   * @param in_sta_table Name of the staging table
			   * @param in_sta_table Name of the logging table
			   * @param in_drop_existing Defines how to deal with existing staging and logging table
			   *           TRUE = drops existing staging and logging table
			   *           FALSE = throw an error if a staging or logging table exists
			   */
			   PROCEDURE create_load_tables (
			      in_sta_table     IN VARCHAR2 DEFAULT '«model.stagingTableName.toUpperCase»',
			      in_log_table     IN VARCHAR2 DEFAULT '«model.loggingTableName.toUpperCase»',
			      in_drop_existing IN BOOLEAN  DEFAULT TRUE
			   );
			   
			   /**
			   * Initial load of latest and history table. Logs operations and errors in logging table.
			   * 
			   * Target tables «model.latestTableName» and «model.historyTableName» must be empty, otherwise an error will be thrown.
			   * The initial load will bypass the hooks in «model.apiPackageName».
			   * An initial load is not supported for tables with ALWAYS generated identity columns, since the primary key
			   * in the staging table is a prerequisite for the initial load.
			   *
			   * @param in_owner Owner of the staging and logging table
			   * @param in_sta_table Staging table containing all periods to be initially loaded
			   * @param in_log_table Logging table for informational and error messages
			   */
			   PROCEDURE init_load (
			      in_owner     IN VARCHAR2 DEFAULT USER,
			      in_sta_table IN VARCHAR2 DEFAULT '«model.stagingTableName.toUpperCase»',
			      in_log_table IN VARCHAR2 DEFAULT '«model.loggingTableName.toUpperCase»'
			   );

			   /**
			   * Identify changed rows and populate them via the upd procedure. Logs operations and errors in logging table.
			   *
			   * @param in_owner Owner of the staging and logging table
			   * @param in_sta_table Staging table containing all periods to be initially loaded
			   * @param in_log_table Logging table for informational and error messages
			   */
			   PROCEDURE upd_load (
			      in_owner     IN VARCHAR2 DEFAULT USER,
			      in_sta_table IN VARCHAR2 DEFAULT '«model.stagingTableName.toUpperCase»',
			      in_log_table IN VARCHAR2 DEFAULT '«model.loggingTableName.toUpperCase»'
			   );

			   «ENDIF»
			   /**
			   * Insert into «model.targetModel.apiTypeToString» table «tableName».
			   *
			   * @param in_new_row New row to be inserted
			   */
			   PROCEDURE ins (
			      in_new_row IN «model.objectTypeName»
			   );

			   /**
			   * Update «model.targetModel.apiTypeToString» table «tableName».
			   *
			   * @param in_new_row Row with updated column values
			   * @param in_old_row Row with original column values
			   */
			   PROCEDURE upd (
			      in_new_row IN «model.objectTypeName»,
			      in_old_row IN «model.objectTypeName»
			   );

			   /**
			   * Delete from «model.targetModel.apiTypeToString» table «tableName».
			   «IF model.isTemporalValidity»
			   * Please note that instead of a physical delete operation the column «BitempRemodeler.IS_DELETED_COL_NAME.toLowerCase» is set to 1.
			   «ENDIF»
			   *
			   * @param in_old_row Row with original column values. 
			   *                   For the core delete operation the following columns are relevant
			   «FOR col : model.inputTable.primaryKeyConstraint.columnNames»
			   *                      - «col.toLowerCase» - primary key to identify object for the delete operation
			   «ENDFOR»
			   «IF model.isTemporalValidity»
			   *                      - «model.params.get(BitempRemodeler.VALID_FROM_COL_NAME).toLowerCase» - start of the period to be marked as deleted
			   *                      - «model.params.get(BitempRemodeler.VALID_TO_COL_NAME).toLowerCase» - end of the period to be marked as deleted
			   «ENDIF»
			   *                   All other columns are provided for the use within pre- and post-delete hooks.
			   */
			   PROCEDURE del (
			      in_old_row IN «model.objectTypeName»
			   );

			END «model.apiPackageName»;
			/
		«ENDIF»
	'''
}

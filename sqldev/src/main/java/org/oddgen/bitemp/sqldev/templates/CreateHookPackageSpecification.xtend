/*
 * Copyright 2016 Philipp Salvisberg <philipp.salvisberg@trivadis.com>
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.oddgen.bitemp.sqldev.templates

import com.jcabi.aspects.Loggable
import org.oddgen.bitemp.sqldev.generators.BitempRemodeler
import org.oddgen.bitemp.sqldev.model.generator.GeneratorModel
import org.oddgen.bitemp.sqldev.model.generator.GeneratorModelTools
import org.oddgen.bitemp.sqldev.resources.BitempResources
import org.oddgen.sqldev.LoggableConstants

@Loggable(LoggableConstants.DEBUG)
class CreateHookPackageSpecification {
	private extension GeneratorModelTools generatorModelTools = new GeneratorModelTools

	def compile(GeneratorModel model) '''
		«IF model.inputTable.exists»
			--
			-- Create hook package specification
			--
			«val tableName = model.inputTable.getNewTableName(model).toLowerCase»
			CREATE OR REPLACE PACKAGE «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.HOOK_PACKAGE_SUFFIX).toLowerCase» AS
			   /** 
			   * Hooks called by «model.targetModel.apiTypeToString» API for table «tableName» (see package body of «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.API_PACKAGE_SUFFIX).toLowerCase»)
			   * generated by «BitempResources.get("EXTENSION_NAME")».
			   * The body of this package is not generated. It has to be crafted and maintained manually. 
			   * Since the API for table «tableName» ignores errors caused by a missing hook package body, the implementation is optional.
			   *
			   * @headcom
			   */
			
			   /**
			   * Hook called before insert into «model.targetModel.apiTypeToString» table «tableName».
			   *
			   * @param in_new_row new Row to be inserted
			   */
			   PROCEDURE pre_ins (
			      in_new_row «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.OBJECT_TYPE_SUFFIX).toLowerCase»
			   );

			   /**
			   * Hook called after insert into «model.targetModel.apiTypeToString» table «tableName».
			   *
			   * @param in_new_row new Row to be inserted
			   */
			   PROCEDURE post_ins (
			      in_new_row «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.OBJECT_TYPE_SUFFIX).toLowerCase»
			   );

			   /**
			   * Hook called before update «model.targetModel.apiTypeToString» table «tableName».
			   *
			   * @param in_new_row Row with updated column values
			   * @param in_old_row Row with original column values
			   */
			   PROCEDURE pre_upd (
			      in_new_row «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.OBJECT_TYPE_SUFFIX).toLowerCase»,
			      in_old_row «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.OBJECT_TYPE_SUFFIX).toLowerCase»
			   );

			   /**
			   * Hook called before update «model.targetModel.apiTypeToString» table «tableName».
			   *
			   * @param in_new_row Row with updated column values
			   * @param in_old_row Row with original column values
			   */
			   PROCEDURE post_upd (
			      in_new_row «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.OBJECT_TYPE_SUFFIX).toLowerCase»,
			      in_old_row «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.OBJECT_TYPE_SUFFIX).toLowerCase»
			   );

			   /**
			   * Hook called before delete from «model.targetModel.apiTypeToString» table «tableName».
			   *
			   * @param in_old_row Row with original column values
			   */
			   PROCEDURE pre_del (
			      in_old_row «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.OBJECT_TYPE_SUFFIX).toLowerCase»
			   );

			   /**
			   * Hook called after delete from «model.targetModel.apiTypeToString» table «tableName».
			   *
			   * @param in_old_row Row with original column values
			   */
			   PROCEDURE post_del (
			      in_old_row «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.OBJECT_TYPE_SUFFIX).toLowerCase»
			   );

			END «model.baseTableName.toLowerCase»«model.params.get(BitempRemodeler.HOOK_PACKAGE_SUFFIX).toLowerCase»;
			/
		«ENDIF»
	'''
}
